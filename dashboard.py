import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time

METRICAS_FILEPATH = "metricas.csv"

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Cognos", layout="wide")
st.title("Acompanhamento do Jogador - Cognos")
st.markdown(
    """
    Este dashboard mostra as m√©tricas de desempenho do jogador no Cognos.
    Os dados s√£o atualizados automaticamente a cada 3 segundos.
"""
)

# Tempo de atualiza√ß√£o autom√°tica (em segundos)
INTERVALO_ATUALIZACAO = 3

# Cria√ß√£o de espa√ßos reservados para atualiza√ß√£o din√¢mica
placeholder = st.empty()

# Loop para atualiza√ß√£o cont√≠nua
while True:
    # Carregar os dados SEM CACHE para sempre pegar os valores mais recentes
    data = pd.read_csv(METRICAS_FILEPATH)

    # Criar um bloco de exibi√ß√£o atualizado dentro do placeholder
    with placeholder.container():
        col1, col2 = st.columns([2, 8])

        # Se√ß√£o de m√©tricas
        with col1:
            st.subheader("üìä M√©tricas da Sess√£o")

            # Score de acerto m√©dio
            st.metric(
                "Sequ√™nia de Acertos M√©dia", f"{np.mean(data['numero_de_acertos']):.2f}"
            )

            # Maior sequ√™ncia de acertos
            st.metric("Maior Sequ√™ncia de Acertos", f"{max(data['numero_de_acertos'])}")

            # Tempo m√©dio de resposta
            st.metric(
                "Tempo M√©dio de Resposta (s)",
                f"{np.mean(data['tempo_medio_de_resposta']):.2f} s",
            )

            # Tempo m√≠nimo de resposta
            st.metric(
                "Tempo M√≠nimo de Resposta (s)",
                f"{np.min(data['tempo_medio_de_resposta']):.2f} s",
            )

            # Varia√ß√£o do tempo de resposta (Desvio padr√£o)
            st.metric(
                "Varia√ß√£o do Tempo de Resposta",
                f"{np.std(data['tempo_medio_de_resposta']):.2f} s",
            )

            # Tempo m√©dio de sess√£o
            st.metric(
                "Tempo M√©dio por Rodada (s)",
                f"{np.mean(data['tempo_da_sessao']):.2f} s",
            )

            # Tempo total da sess√£o (em minutos)
            st.metric(
                "Tempo Total da Sess√£o (min)",
                f"{np.sum(data['tempo_da_sessao']) / 60:.2f} min",
            )

        # Se√ß√£o de gr√°ficos
        with col2:
            col21, col22 = st.columns(2)
            figsize = (4, 3)
            with col21:
                # Gr√°fico de distribui√ß√£o do tempo m√©dio de resposta
                fig, ax = plt.subplots(figsize=figsize)
                sns.histplot(
                    data["tempo_medio_de_resposta"],
                    kde=True,
                    ax=ax,
                    bins=20,
                    color="lightblue",
                )
                ax.set_title(
                    "Distribui√ß√£o do Tempo de Resposta", fontsize=10, color="black"
                )
                ax.set_xlabel("Tempo de Resposta (s)", fontsize=6, color="black")
                ax.set_ylabel("Frequ√™ncia", fontsize=6, color="black")
                ax.tick_params(axis="both", colors="gray")  # Torna os ticks cinzas
                for spine in ax.spines.values():  # Remover a borda (spines)
                    spine.set_visible(False)
                plt.tight_layout()
                st.pyplot(fig)

                # Gr√°fico de dispers√£o com linha de regress√£o: Tempo M√©dio de Resposta vs N√∫mero de Acertos
                fig, ax = plt.subplots(figsize=figsize)
                sns.regplot(
                    x=data["tempo_medio_de_resposta"],
                    y=data["numero_de_acertos"],
                    ax=ax,
                    scatter_kws={
                        "color": "gray",
                        "alpha": 0.6,
                    },  # Pontos em cinza suave
                    line_kws={
                        "color": "lightblue",
                        "lw": 2,
                    },  # Linha de regress√£o em vermelho claro
                    ci=None,  # N√£o mostrar intervalo de confian√ßa
                )
                ax.set_title(
                    "Tempo M√©dio de Resposta vs N√∫mero de Acertos",
                    fontsize=10,
                    color="black",
                )
                ax.set_xlabel("Tempo M√©dio de Resposta (s)", fontsize=6, color="black")
                ax.set_ylabel("N√∫mero de Acertos", fontsize=6, color="black")
                ax.tick_params(axis="both", colors="gray")  # Torna os ticks cinzas
                for spine in ax.spines.values():  # Remover a borda (spines)
                    spine.set_visible(False)
                plt.tight_layout()
                st.pyplot(fig)

            with col22:
                # Gr√°fico de distribui√ß√£o do n√∫mero de acertos
                fig, ax = plt.subplots(figsize=figsize)
                sns.histplot(
                    data["numero_de_acertos"],
                    kde=True,
                    ax=ax,
                    bins=20,
                    color="lightblue",
                )
                ax.set_title(
                    "Distribui√ß√£o do N√∫mero de Acertos", fontsize=10, color="black"
                )
                ax.set_xlabel("N√∫mero de Acertos", fontsize=6, color="black")
                ax.set_ylabel("Frequ√™ncia", fontsize=6, color="black")
                ax.tick_params(axis="both", colors="gray")  # Torna os ticks cinzas
                for spine in ax.spines.values():  # Remover a borda (spines)
                    spine.set_visible(False)
                plt.tight_layout()
                st.pyplot(fig)

                # Gr√°fico de acertos ao longo da sess√£o
                fig, ax = plt.subplots(figsize=figsize)
                sns.lineplot(
                    x=range(len(data)),
                    y=data["numero_de_acertos"],
                    ax=ax,
                    color="lightblue",  # Linha em vermelho claro
                    lw=2,  # Largura da linha
                )
                ax.set_title("Acertos ao Longo da Sess√£o", fontsize=10, color="black")
                ax.set_xlabel("N√∫mero da Rodada", fontsize=6, color="black")
                ax.set_ylabel("N√∫mero de Acertos", fontsize=6, color="black")
                ax.tick_params(axis="both", colors="gray")  # Torna os ticks cinzas
                for spine in ax.spines.values():  # Remover a borda (spines)
                    spine.set_visible(False)
                plt.tight_layout()
                st.pyplot(fig)

    # Aguardar antes da pr√≥xima atualiza√ß√£o
    time.sleep(INTERVALO_ATUALIZACAO)

    # Atualizar os valores sem recarregar a p√°gina
    st.rerun()
